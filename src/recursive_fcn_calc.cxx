// generated by Fast Light User Interface Designer (fluid) version 1.0305

#include "recursive_fcn_calc.h"

#ifndef RECURSIVE_FCN_CALC_H
#define RECURSIVE_FCN_CALC_H

Fl_Double_Window *main_win=(Fl_Double_Window *)0;

Fl_Input *statement_input=(Fl_Input *)0;

Fl_Output *output_preview=(Fl_Output *)0;

Fl_Output *history_output=(Fl_Output *)0;

Fl_Return_Button *calc_btn=(Fl_Return_Button *)0;

Fl_Button *add_fcn_btn=(Fl_Button *)0;

Fl_Button *view_fcns_btn=(Fl_Button *)0;

Fl_Double_Window *add_fcn_win=(Fl_Double_Window *)0;

Fl_Input *fcn_input=(Fl_Input *)0;

Fl_Input *base_case_input=(Fl_Input *)0;

Fl_Input *restriction_input=(Fl_Input *)0;

Fl_Button *cancel_fcn_btn=(Fl_Button *)0;

Fl_Return_Button *fcn_confirm_btn=(Fl_Return_Button *)0;

Fl_Double_Window *view_fcn_win=(Fl_Double_Window *)0;

Fl_Button *fcn_view_back_btn=(Fl_Button *)0;

Fl_Button *view_fcns_add_fcn_btn=(Fl_Button *)0;

Fl_Pack *view_fcns_pack=(Fl_Pack *)0;
/**
 Creates main window
*/
Fl_Double_Window* make_window() {
  { // 	
    main_win = new Fl_Double_Window(545, 730, "Recursive Function Calculator");
    main_win->tooltip("Calculator able to calculate the result of recursive functions");
    { statement_input = new Fl_Input(5, 671, 535, 24);
      statement_input->tooltip("Statement input");
      statement_input->labeltype(FL_NO_LABEL);
      statement_input->align(Fl_Align(132));
      statement_input->when(FL_WHEN_CHANGED);
    } // Fl_Input* statement_input
    { output_preview = new Fl_Output(5, 702, 395, 23);
      output_preview->tooltip("Output preview");
      output_preview->labeltype(FL_NO_LABEL);
    } // Fl_Output* output_preview
    { history_output = new Fl_Output(5, 32, 535, 633);
      history_output->tooltip("History");
      history_output->type(12);
      history_output->labeltype(FL_NO_LABEL);
      history_output->align(Fl_Align(FL_ALIGN_TOP_LEFT));
    } // Fl_Output* history_output
    { calc_btn = new Fl_Return_Button(405, 700, 135, 25, "Calc");
      calc_btn->tooltip("Calculate result");
    } // Fl_Return_Button* calc_btn
    { add_fcn_btn = new Fl_Button(5, 5, 105, 25, "New Function");
      add_fcn_btn->tooltip("Create a new function");
    } // Fl_Button* add_fcn_btn
    { view_fcns_btn = new Fl_Button(425, 5, 114, 25, "View Functions");
      view_fcns_btn->tooltip("View currently defined functions");
    } // Fl_Button* view_fcns_btn
    main_win->end();
    main_win->resizable(main_win);
  } // Fl_Double_Window* main_win
  return main_win;
}

/**
 Creates function add window
*/
Fl_Double_Window* make_fcn_window() {
  { add_fcn_win = new Fl_Double_Window(630, 375, "Add Function");
    add_fcn_win->tooltip("Add a function to the calculator");
    { fcn_input = new Fl_Input(65, 1, 560, 24, "Function");
      fcn_input->tooltip("Function input");
    } // Fl_Input* fcn_input
    { base_case_input = new Fl_Input(85, 31, 540, 122, "Base Cases");
      base_case_input->tooltip("Base cases for a recursive function, separated by newlines");
      base_case_input->type(4);
    } // Fl_Input* base_case_input
    { restriction_input = new Fl_Input(130, 155, 496, 163, "Input Restrictions");
      restriction_input->tooltip("Input restrictions, separated by newlines");
      restriction_input->type(4);
    } // Fl_Input* restriction_input
    { cancel_fcn_btn = new Fl_Button(5, 325, 175, 45, "Cancel");
      cancel_fcn_btn->tooltip("Cancel adding new function");
    } // Fl_Button* cancel_fcn_btn
    { fcn_confirm_btn = new Fl_Return_Button(399, 325, 226, 45, "Confirm");
      fcn_confirm_btn->tooltip("Confirm new function");
    } // Fl_Return_Button* fcn_confirm_btn
    add_fcn_win->end();
    add_fcn_win->resizable(add_fcn_win);
  } // Fl_Double_Window* add_fcn_win
  return add_fcn_win;
}

Fl_Double_Window* make_view_fcn_window() {
  { view_fcn_win = new Fl_Double_Window(545, 730, "View Functions");
    view_fcn_win->tooltip("Click on a function to edit it");
    { fcn_view_back_btn = new Fl_Button(5, 700, 64, 25, "Back");
      fcn_view_back_btn->tooltip("Return to the calculator window");
    } // Fl_Button* fcn_view_back_btn
    { view_fcns_add_fcn_btn = new Fl_Button(435, 700, 105, 25, "New Function");
      view_fcns_add_fcn_btn->tooltip("Add a new function");
    } // Fl_Button* view_fcns_add_fcn_btn
    { view_fcns_pack = new Fl_Pack(5, 5, 535, 690);
      view_fcns_pack->tooltip("Click on a function to edit it");
      view_fcns_pack->end();
    } // Fl_Pack* view_fcns_pack
    view_fcn_win->end();
    view_fcn_win->resizable(view_fcn_win);
  } // Fl_Double_Window* view_fcn_win
  return view_fcn_win;
}
#endif
